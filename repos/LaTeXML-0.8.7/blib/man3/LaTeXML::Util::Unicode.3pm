.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LaTeXML::Util::Unicode 3"
.TH LaTeXML::Util::Unicode 3 "2022-07-09" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"LaTeXML::Util::Unicode" \- Unicode Utilities.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\f(CW\*(C`LaTeXML::Util::Unicode\*(C'\fR provides several useful utilities for manipulating Unicode for LaTeXML,
mostly to assist with mathematics.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.ie n .IP """$string = UTF($codepoint);""" 4
.el .IP "\f(CW$string = UTF($codepoint);\fR" 4
.IX Item "$string = UTF($codepoint);"
Converts the given numeric codepoint to unicode.
This is useful for codepoints under 255,
such as \f(CW\*(C`UTF(0xA0)\*(C'\fR for non-breaking space,
which perl does not reliably handle.
.ie n .IP """$mathvariant = unicode_mathvariant($font);""" 4
.el .IP "\f(CW$mathvariant = unicode_mathvariant($font);\fR" 4
.IX Item "$mathvariant = unicode_mathvariant($font);"
Converts the font to a Unicode-appropriate mathvariant.
The font should be in the string form generally found during post-processing,
eg \*(L"bold italic\*(R".  The mathvariant returned can be used in MathML, or passed
to \f(CW\*(C`unicode_convert\*(C'\fR to convert strings into the given style.
.ie n .IP """$unicode = unicode_convert($string,$style);""" 4
.el .IP "\f(CW$unicode = unicode_convert($string,$style);\fR" 4
.IX Item "$unicode = unicode_convert($string,$style);"
Converts the given string to the codepoints correspinding to the requested style.
Returns undef if not all characters in the string can be converted.
The recognized styles are
\&\f(CW\*(C`bold\*(C'\fR,
\&\f(CW\*(C`italic\*(C'\fR,
\&\f(CW\*(C`bold\-italic\*(C'\fR,
\&\f(CW\*(C`sans\-serif\*(C'\fR,
\&\f(CW\*(C`bold\-sans\-serif\*(C'\fR,
\&\f(CW\*(C`sans\-serif\-italic\*(C'\fR,
\&\f(CW\*(C`sans\-serif\-bold\-italic\*(C'\fR,
\&\f(CW\*(C`monospace\*(C'\fR,
\&\f(CW\*(C`script\*(C'\fR,
\&\f(CW\*(C`bold\-script\*(C'\fR,
\&\f(CW\*(C`fraktur\*(C'\fR,
\&\f(CW\*(C`bold\-fraktur\*(C'\fR,
\&\f(CW\*(C`double\-struck\*(C'\fR,
as well as
\&\f(CW\*(C`superscript\*(C'\fR
and
\&\f(CW\*(C`subscript\*(C'\fR.
