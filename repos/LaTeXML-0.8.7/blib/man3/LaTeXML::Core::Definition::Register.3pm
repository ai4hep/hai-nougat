.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LaTeXML::Core::Definition::Register 3"
.TH LaTeXML::Core::Definition::Register 3 "2022-07-09" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"LaTeXML::Core::Definition::Register"  \- Control sequence definitions for Registers.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These are set up as a speciallized primitive with a getter and setter
to access and store values in the Stomach.
See LaTeXML::Package for the most convenient means to create them.
.PP
It extends LaTeXML::Core::Definition::Primitive.
.PP
Registers generally store some value in the current \f(CW\*(C`LaTeXML::Core::State\*(C'\fR, but are not
required to. Like TeX's registers, when they are digested, they expect an optional
\&\f(CW\*(C`=\*(C'\fR, and then a value of the appropriate type. Register definitions support these
additional methods:
.SH "Methods"
.IX Header "Methods"
.ie n .IP """$value = $register\->valueOf(@args);""" 4
.el .IP "\f(CW$value = $register\->valueOf(@args);\fR" 4
.IX Item "$value = $register->valueOf(@args);"
Return the value associated with the register, by invoking it's \f(CW\*(C`getter\*(C'\fR function.
The additional args are used by some registers
to index into a set, such as the index to \f(CW\*(C`\ecount\*(C'\fR.
.ie n .IP """$register\->setValue($value,@args);""" 4
.el .IP "\f(CW$register\->setValue($value,@args);\fR" 4
.IX Item "$register->setValue($value,@args);"
Assign a value to the register, by invoking it's \f(CW\*(C`setter\*(C'\fR function.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bruce Miller <bruce.miller@nist.gov>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the \s-1US.\s0
