.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LaTeXML::Core::Whatsit 3"
.TH LaTeXML::Core::Whatsit 3 "2022-01-03" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"LaTeXML::Core::Whatsit" \- Representations of digested objects.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
represents a digested object that can generate arbitrary elements in the \s-1XML\s0 Document.
It extends LaTeXML::Core::Box.
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
Note that the font is stored in the data properties under 'font'.
.ie n .IP """$defn = $whatsit\->getDefinition;""" 4
.el .IP "\f(CW$defn = $whatsit\->getDefinition;\fR" 4
.IX Item "$defn = $whatsit->getDefinition;"
Returns the LaTeXML::Core::Definition responsible for creating \f(CW$whatsit\fR.
.ie n .IP """$value = $whatsit\->getProperty($key);""" 4
.el .IP "\f(CW$value = $whatsit\->getProperty($key);\fR" 4
.IX Item "$value = $whatsit->getProperty($key);"
Returns the value associated with \f(CW$key\fR in the \f(CW$whatsit\fR's property list.
.ie n .IP """$whatsit\->setProperty($key,$value);""" 4
.el .IP "\f(CW$whatsit\->setProperty($key,$value);\fR" 4
.IX Item "$whatsit->setProperty($key,$value);"
Sets the \f(CW$value\fR associated with the \f(CW$key\fR in the \f(CW$whatsit\fR's property list.
.ie n .IP """$props = $whatsit\->getProperties();""" 4
.el .IP "\f(CW$props = $whatsit\->getProperties();\fR" 4
.IX Item "$props = $whatsit->getProperties();"
Returns the hash of properties stored on this Whatsit.
(Note that this hash is modifiable).
.ie n .IP """$props = $whatsit\->setProperties(%keysvalues);""" 4
.el .IP "\f(CW$props = $whatsit\->setProperties(%keysvalues);\fR" 4
.IX Item "$props = $whatsit->setProperties(%keysvalues);"
Sets several properties, like setProperty.
.ie n .IP """$list = $whatsit\->getArg($n);""" 4
.el .IP "\f(CW$list = $whatsit\->getArg($n);\fR" 4
.IX Item "$list = $whatsit->getArg($n);"
Returns the \f(CW$n\fR\-th argument (starting from 1) for this \f(CW$whatsit\fR.
.ie n .IP """@args = $whatsit\->getArgs;""" 4
.el .IP "\f(CW@args = $whatsit\->getArgs;\fR" 4
.IX Item "@args = $whatsit->getArgs;"
Returns the list of arguments for this \f(CW$whatsit\fR.
.ie n .IP """$whatsit\->setArgs(@args);""" 4
.el .IP "\f(CW$whatsit\->setArgs(@args);\fR" 4
.IX Item "$whatsit->setArgs(@args);"
Sets the list of arguments for this \f(CW$whatsit\fR to \f(CW@args\fR (each arg should be
a \f(CW\*(C`LaTeXML::Core::List\*(C'\fR).
.ie n .IP """$list = $whatsit\->getBody;""" 4
.el .IP "\f(CW$list = $whatsit\->getBody;\fR" 4
.IX Item "$list = $whatsit->getBody;"
Return the body for this \f(CW$whatsit\fR. This is only defined for environments or
top-level math formula.  The body is stored in the properties under 'body'.
.ie n .IP """$whatsit\->setBody(@body);""" 4
.el .IP "\f(CW$whatsit\->setBody(@body);\fR" 4
.IX Item "$whatsit->setBody(@body);"
Sets the body of the \f(CW$whatsit\fR to the boxes in \f(CW@body\fR.  The last \f(CW$box\fR in \f(CW@body\fR
is assumed to represent the `trailer', that is the result of the invocation
that closed the environment or math.  It is stored separately in the properties
under 'trailer'.
.ie n .IP """$list = $whatsit\->getTrailer;""" 4
.el .IP "\f(CW$list = $whatsit\->getTrailer;\fR" 4
.IX Item "$list = $whatsit->getTrailer;"
Return the trailer for this \f(CW$whatsit\fR. See \f(CW\*(C`setBody\*(C'\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bruce Miller <bruce.miller@nist.gov>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the \s-1US.\s0
