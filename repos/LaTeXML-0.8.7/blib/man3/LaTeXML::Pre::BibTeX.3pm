.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LaTeXML::Pre::BibTeX 3"
.TH LaTeXML::Pre::BibTeX 3 "2021-06-07" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"LaTeXML::Pre::BibTeX" \- implements a BibTeX parser for LaTeXML.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`LaTeXML::Pre::BibTeX\*(C'\fR serves as a low-level parser of BibTeX database files.
It parses and stores a \f(CW\*(C`LaTeXML::Pre::BibTeX::Entry\*(C'\fR for each entry into the current \s-1STATE.\s0
BibTeX \f(CW\*(C`string\*(C'\fR macros are substituted into the field values, but no other
processing of the data is done.
See \f(CW\*(C`LaTeXML::Package::BibTeX.pool.ltxml\*(C'\fR for how further processing
is carried out, and can be customized.
.SS "Creating a BibTeX"
.IX Subsection "Creating a BibTeX"
.ie n .IP """my $bib = LaTeXML::Pre::BibTeX\->newFromFile($bibname);""" 4
.el .IP "\f(CWmy $bib = LaTeXML::Pre::BibTeX\->newFromFile($bibname);\fR" 4
.IX Item "my $bib = LaTeXML::Pre::BibTeX->newFromFile($bibname);"
Creates a \f(CW\*(C`LaTeXML::Pre::BibTeX\*(C'\fR object representing a bibliography
from a BibTeX database file.
.ie n .IP """my $bib = LaTeXML::Pre::BibTeX\->newFromString($string);""" 4
.el .IP "\f(CWmy $bib = LaTeXML::Pre::BibTeX\->newFromString($string);\fR" 4
.IX Item "my $bib = LaTeXML::Pre::BibTeX->newFromString($string);"
Creates a \f(CW\*(C`LaTeXML::Pre::BibTeX\*(C'\fR object representing a bibliography
from a string containing the BibTeX data.
.SS "Methods"
.IX Subsection "Methods"
.ie n .IP """$string = $bib\->toTeX;""" 4
.el .IP "\f(CW$string = $bib\->toTeX;\fR" 4
.IX Item "$string = $bib->toTeX;"
Returns a string containing the TeX code to be digested
by a LaTeXML object to process the bibliography.
The string contains all \f(CW@PREAMBLE\fR data
and invocations of \f(CW\*(C`\e\eProcessBibTeXEntry{$key}\*(C'\fR for each bibliographic
entry. The \f(CW$key\fR can be used to lookup the data from \f(CW$STATE\fR
as \f(CW\*(C`LookupValue(\*(AqBIBITEM@\*(Aq.$key)\*(C'\fR.
See \f(CW\*(C`BibTeX.pool\*(C'\fR for how the processing is carried out.
.SS "BibEntry objects"
.IX Subsection "BibEntry objects"
The representation of a BibTeX entry.
.ie n .IP """$type = $bibentry\->getType;""" 4
.el .IP "\f(CW$type = $bibentry\->getType;\fR" 4
.IX Item "$type = $bibentry->getType;"
Returns a string naming the entry type of the entry
(No aliasing is done here).
.ie n .IP """$key = $bibentry\->getKey;""" 4
.el .IP "\f(CW$key = $bibentry\->getKey;\fR" 4
.IX Item "$key = $bibentry->getKey;"
Returns the bibliographic key for the entry.
.ie n .IP """@fields = $bibentry\->getFields;""" 4
.el .IP "\f(CW@fields = $bibentry\->getFields;\fR" 4
.IX Item "@fields = $bibentry->getFields;"
Returns a list of pairs \f(CW\*(C`[$name,$value]\*(C'\fR representing
all fields, in the order defined, for the entry.
Both the \f(CW$name\fR and \f(CW$value\fR are strings.
Field names may be repeated, if they are in the bibliography.
.ie n .IP """$value = $bibentry\->getField($name);""" 4
.el .IP "\f(CW$value = $bibentry\->getField($name);\fR" 4
.IX Item "$value = $bibentry->getField($name);"
Returns the value (or \f(CW\*(C`undef\*(C'\fR) associated with
the the given field name. If the field was repeated
in the bibliography, only the last one is returned.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bruce Miller <bruce.miller@nist.gov>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the \s-1US.\s0
