.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "LaTeXML::Core::Box 3"
.TH LaTeXML::Core::Box 3 "2022-01-03" "perl v5.32.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
"LaTeXML::Core::Box" \- Representations of digested objects;
extends LaTeXML::Common::Object.
.SS "Exported Functions"
.IX Subsection "Exported Functions"
.ie n .IP """$box = Box($string,$font,$locator,$tokens);""" 4
.el .IP "\f(CW$box = Box($string,$font,$locator,$tokens);\fR" 4
.IX Item "$box = Box($string,$font,$locator,$tokens);"
Creates a Box representing the \f(CW$string\fR in the given \f(CW$font\fR.
The \f(CW$locator\fR records the document source position.
The \f(CW$tokens\fR is a Tokens list containing the TeX that created
(or could have) the Box.
If \f(CW$font\fR or \f(CW$locator\fR are undef, they are obtained from the
currently active LaTeXML::Core::State.  Note that \f(CW$string\fR can
be undef which contributes nothing to the generated document,
but does record the TeX code (in \f(CW$tokens\fR).
.SS "\s-1METHODS\s0"
.IX Subsection "METHODS"
.ie n .IP """$font = $digested\->getFont;""" 4
.el .IP "\f(CW$font = $digested\->getFont;\fR" 4
.IX Item "$font = $digested->getFont;"
Returns the font used by \f(CW$digested\fR.
.ie n .IP """$boole = $digested\->isMath;""" 4
.el .IP "\f(CW$boole = $digested\->isMath;\fR" 4
.IX Item "$boole = $digested->isMath;"
Returns whether \f(CW$digested\fR was created in math mode.
.ie n .IP """@boxes = $digested\->unlist;""" 4
.el .IP "\f(CW@boxes = $digested\->unlist;\fR" 4
.IX Item "@boxes = $digested->unlist;"
Returns a list of the boxes contained in \f(CW$digested\fR.
It is also defined for the Boxes and Whatsit (which just
return themselves) so they can stand-in for a List.
.ie n .IP """$string = $digested\->toString;""" 4
.el .IP "\f(CW$string = $digested\->toString;\fR" 4
.IX Item "$string = $digested->toString;"
Returns a string representing this \f(CW$digested\fR.
.ie n .IP """$string = $digested\->revert;""" 4
.el .IP "\f(CW$string = $digested\->revert;\fR" 4
.IX Item "$string = $digested->revert;"
Reverts the box to the list of \f(CW\*(C`Token\*(C'\fRs that created (or could have
created) it.
.ie n .IP """$string = $digested\->getLocator;""" 4
.el .IP "\f(CW$string = $digested\->getLocator;\fR" 4
.IX Item "$string = $digested->getLocator;"
Get an object describing the location in the original source that gave rise
to \f(CW$digested\fR.
.ie n .IP """$digested\->beAbsorbed($document);""" 4
.el .IP "\f(CW$digested\->beAbsorbed($document);\fR" 4
.IX Item "$digested->beAbsorbed($document);"
\&\f(CW$digested\fR should get itself absorbed into the \f(CW$document\fR in whatever way
is apppropriate.
.ie n .IP """$string = $box\->getString;""" 4
.el .IP "\f(CW$string = $box\->getString;\fR" 4
.IX Item "$string = $box->getString;"
Returns the string part of the \f(CW$box\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bruce Miller <bruce.miller@nist.gov>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the \s-1US.\s0
